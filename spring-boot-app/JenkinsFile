pipeline {
  agent {
docker {
      image 'srihari541/maven-srihari-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
}
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', credentialsId: 'gitcred', url: 'https://github.com/srihari541/Maven.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh ''' 
		cd spring-boot-app 
		''' // trying to genarate jar file 
        sh '''
		mvn clean package
		'''
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.157.201.143:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh ''' 
		  cd spring-boot-app 
		  '''
          sh '''
		  mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
		  '''
        }
      }
    }
     stage('Build Docker Image') {
      steps {
        DOCKER_IMAGE = "srihari541/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
        sh '''
		cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .
		'''
      }
	 }
	  stage('Scan Docker Image with Trivy') {
            steps {
                script {
                    echo "Running Trivy vulnerability scan..."
                    // FAILS build if HIGH/CRITICAL found
                    sh '''
                        trivy image --exit-code 1 --severity HIGH,CRITICAL --no-progress ${DOCKER_IMAGE}:${BUILD_NUMBER}
                    '''
                }
            }
        }
         stage('Push to Docker Hub') {
            steps {
                script {
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()    
                        
                    }
                }
            }
        }
		
	    stage('owasp') {
            steps {
               dependencyCheck additionalArguments: '--format HTML', odcInstallation: 'Dpchk'
            }

            
        }	
        stage ('Deploy kyverno helm chart on eks') {
		 steps {
		   scripts {
		     sh '''
			 aws eks update-kubeconfig --name demo-eks-cluster --region us-east-1
			 '''
			 sh '''
			 kubectl get ns
			 '''
			 sh '''
			 helm install java ./java-chart
			 '''
			 sh '''
			 cd Kyverno && kubectl creat -f .
			 '''
			   
			      }
			}
		}
	}
}	
